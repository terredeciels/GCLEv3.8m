package ia;

import position.GPosition;
import position.ICodage;
import static position.ICodage.CASES117;
import static position.ICodage.OUT;
import static position.ICodage.ROI;

public class GPositionEvaluator implements ICodage {

//    public static final int SIDE_BLACK = 1;
//    public static final int SIDE_WHITE = 0;
    public static final int SIDE_BLACK = 0;
    public static final int SIDE_WHITE = 1;// Math.abs(BLANC)

    public static final int PAWN = 0;
    public static final int KNIGHT = 2;
    public static final int BISHOP = 4;
    public static final int ROOK = 6;
    public static final int QUEEN = 8;
    public static final int KING = 10;

    public static final int WHITE_PAWN = PAWN + SIDE_WHITE;
    public static final int WHITE_KNIGHT = KNIGHT + SIDE_WHITE;
    public static final int WHITE_BISHOP = BISHOP + SIDE_WHITE;
    public static final int WHITE_ROOK = ROOK + SIDE_WHITE;
    public static final int WHITE_QUEEN = QUEEN + SIDE_WHITE;
    public static final int WHITE_KING = KING + SIDE_WHITE;

    public static final int BLACK_PAWN = PAWN + SIDE_BLACK;
    public static final int BLACK_KNIGHT = KNIGHT + SIDE_BLACK;
    public static final int BLACK_BISHOP = BISHOP + SIDE_BLACK;
    public static final int BLACK_ROOK = ROOK + SIDE_BLACK;
    public static final int BLACK_QUEEN = QUEEN + SIDE_BLACK;
    public static final int BLACK_KING = KING + SIDE_BLACK;

    public static final int EMPTY_SQUARE = 12;
    public static final int ALL_PIECES = 12;
    public static final int ALL_BITBOARDS = 14;

    public static final int CASTLE_KINGSIDE = 0;
    public static final int CASTLE_QUEENSIDE = 2;

    int MaxPawnFileBins[];
    int MaxPawnColorBins[];
    int MaxTotalPawns;
    int PawnRams;
    int MaxMostAdvanced[];
    int MaxPassedPawns[];
    int MinPawnFileBins[];
    int MinMostBackward[];
    private long SquareBits[];

    private final int MaterialValue[];
    private final int NumPawns[];
    private long BitBoards[];
    private boolean HasCastled[];
    private boolean CastlingStatus[];

    private static final int GRAIN = 3;

    public GPositionEvaluator() {
        MaxPawnFileBins = new int[8];
        MaxPawnColorBins = new int[2];
        MaxMostAdvanced = new int[8];
        MaxPassedPawns = new int[8];
        MinPawnFileBins = new int[8];
        MinMostBackward = new int[8];
        BitBoards = new long[ALL_BITBOARDS];
        CastlingStatus = new boolean[4];
        HasCastled = new boolean[2];

        NumPawns = new int[2];
        MaterialValue = new int[2];

    }
    private GPosition gp;
    private int couleur;

    public GPositionEvaluator(GPosition gp) {
        this.gp = gp;
        NumPawns = new int[2];
        MaterialValue = new int[2];
        couleur = gp.getTrait(); // ?
        getMaterielValue();
    }

    public int EvaluateQuick(int noirsOuBlancs) {
        return ((EvalMaterial(noirsOuBlancs) >> GRAIN) << GRAIN);
    }

    public int EvaluateComplete(int noirsOuBlancs) {
//        AnalyzePawnStructure(noirsOuBlancs);

        return (((EvalMaterial(noirsOuBlancs)
                //                + EvalPawnStructure(noirsOuBlancs)
                + EvalBadBishops(noirsOuBlancs)
                + EvalDevelopment(noirsOuBlancs)
                + EvalRookBonus(noirsOuBlancs)
                + EvalKingTropism(noirsOuBlancs)) >> GRAIN) << GRAIN);
    }

    private int fCaseRoi(GPosition position, int couleur) {
        int[] pEtats = position.getEtats();
        int caseRoi = OUT;
        int etatO;
        int typeO;
        for (int caseO : CASES117) {
            etatO = pEtats[caseO];
            typeO = Math.abs(etatO);
            if ((typeO == ROI) && (etatO * couleur > 0)) {
                caseRoi = caseO;
                break;
            }
        }
        return caseRoi;
    }

    private int couleurPiece(int caseO) {
        return (gp.getEtats()[caseO] < 0) ? BLANC : NOIR;
    }

    private int typeDePiece(int caseO) {
        return (gp.getEtats()[caseO] < 0) ? -gp.getEtats()[caseO] : gp.getEtats()[caseO];
    }

    private boolean rangFinal(int caseX, int couleur) {
        if ((caseX >= a1) && (caseX <= h1) && (couleur == NOIR)) {
            return true;
        } else {
            return (caseX >= a8) && (caseX <= h8) && (couleur == BLANC);
        }
    }

    private boolean rang7(int caseX, int couleur) {
        if ((caseX >= a2) && (caseX <= h2) && (couleur == NOIR)) {
            return true;
        } else {
            return (caseX >= a7) && (caseX <= h7) && (couleur == BLANC);
        }
    }

    private int EvalKingTropism(int noirsOuBlancs) {
        int score = 0;
        if (noirsOuBlancs == BLANC) {//SIDE_WHITE

            // Look for enemy king first!
            int _caseRoi = fCaseRoi(gp, BLANC);
            int kingRow = _caseRoi >> 8;
            int kingColumn = _caseRoi % 8;

            // Now, look for pieces which need to be evaluated
            for (int caseO : CASES117) {
                int _case = INDICECASES[caseO];//0 a 63
                //verifier
                int pieceRow = _case >> 8;
                int pieceColumn = _case % 8;

                if (couleurPiece(caseO) == BLANC) {

                    switch (typeDePiece(caseO)) {

                        case TOUR:
                            score -= (Math.min(Math.abs(kingRow - pieceRow),
                                    Math.abs(kingColumn - pieceColumn)) << 1);
                            break;
                        case CAVALIER:
                            score += 5 - Math.abs(kingRow - pieceRow)
                                    - Math.abs(kingColumn - pieceColumn);
                            break;
                        case DAME:
                            score -= Math.min(Math.abs(kingRow - pieceRow),
                                    Math.abs(kingColumn - pieceColumn));
                            break;
                        default:
                            break;
                    }
                }
            }

        } else {
            // Look for enemy king first
            int _caseRoi = fCaseRoi(gp, NOIR);
            int kingRow = _caseRoi >> 8;
            int kingColumn = _caseRoi % 8;

            // Now, look for pieces which need to be evaluated
            for (int caseO : CASES117) {
                int _case = INDICECASES[caseO];//0 a 63
                //verifier

                int pieceRow = _case >> 8;
                int pieceColumn = _case % 8;
                if (couleurPiece(caseO) == BLANC) {

                    switch (typeDePiece(caseO)) {
                        case TOUR:
                            score -= (Math.min(Math.abs(kingRow - pieceRow),
                                    Math.abs(kingColumn - pieceColumn)) << 1);
                            break;
                        case CAVALIER:
                            score += 5 - Math.abs(kingRow - pieceRow)
                                    - Math.abs(kingColumn - pieceColumn);
                            break;
                        case DAME:
                            score -= Math.min(Math.abs(kingRow - pieceRow),
                                    Math.abs(kingColumn - pieceColumn));
                            break;
                        default:
                            break;
                    }
                }
            }

        }
        return score;
    }

    private int EvalRookBonus(int noirsOuBlancs) {
        if (!isTour(noirsOuBlancs)) {
            return 0;
        }
        /*
        @TODO is tour ?
         */
//        long rookboard = GetBitBoard(ROOK + noirsOuBlancs);
//        // is tour ?
//        if (rookboard == 0) {
//            return 0;
//        }
        int score = 0;
        for (int caseO : CASES117) {
            int _case = INDICECASES[caseO];//0 a 63
            //verifier
            int pieceRow = _case >> 8;
            int pieceColumn = _case % 8;
//        for (int square = 0; square < 64; square++) {

            // Find a rook
            if (typeDePiece(caseO) == TOUR) {
//            if ((rookboard & SquareBits[square]) != 0) {

                // Is this rook on the seventh rank?
//                int rank = (square >> 3);
                int file = (_case % 8);
                if (rang7(caseO, noirsOuBlancs)) {
                    score += 22;
                }
//               if(rangFinal(caseO,NOIR)) score += 22;

//                if ((noirsOuBlancs == BLANC) && (rank == 1)) {
//                    score += 22;
//                }
//                if ((noirsOuBlancs == NOIR) && (rank == 7)) {
//                    score += 22;
//                }
                // Is this rook on a semi- or completely open file?
                if (MaxPawnFileBins[file] == 0) {
                    if (MinPawnFileBins[file] == 0) {
                        score += 10;
                    } else {
                        score += 4;
                    }
                }

                /*
                @TODO Is this rook behind a passed pawn?
                 */
                // Is this rook behind a passed pawn?
//                if ((noirsOuBlancs == SIDE_WHITE) && (MaxPassedPawns[file] < square)) {
//                    score += 25;
//                }
//                if ((noirsOuBlancs == SIDE_BLACK) && (MaxPassedPawns[file] > square)) {
//                    score += 25;
//                }
                // Use the bitboard erasure trick to avoid looking for additional
                // rooks once they have all been seen
//                rookboard ^= SquareBits[square];
//                if (rookboard == 0) {
//                    break;
//                }
            }
        }
        return score;
    }

    private int EvalDevelopment(int noirsOuBlancs) {
        int score = 0;

        if (noirsOuBlancs == SIDE_WHITE) {
            // Has the machine advanced its center pawns?
            if (typeDePiece(e2) == PION && couleurPiece(e2) == BLANC) {
                score -= 15;
            }
            if (typeDePiece(d2) == PION && couleurPiece(d2) == BLANC) {
                score -= 15;
            }
//            if (FindWhitePiece(51) == WHITE_PAWN) {
//                score -= 15;
//            }
//            if (FindWhitePiece(52) == WHITE_PAWN) {
//                score -= 15;
//            }

            // Penalize bishops and knights on the back rank
            for (int square = a8; square <= h8; square++) {//verif
                if (couleurPiece(square) == BLANC
                        && (typeDePiece(square) == CAVALIER || typeDePiece(square) == FOU)) {
                    score -= 10;
                }
//                if ((FindWhitePiece(square) == WHITE_KNIGHT) || (FindWhitePiece(square) == WHITE_BISHOP)) {
//                    score -= 10;
//                }
            }

            /*
            @TODO Penalize too-early queen movement (white)
             */
//           long queenboard = GetBitBoard(WHITE_QUEEN);
//            if ((queenboard != 0) && ((queenboard & SquareBits[59]) == 0)) {
//                // First, count friendly pieces on their original squares
//                int cnt = 0;
//                if ((GetBitBoard(WHITE_BISHOP) & SquareBits[58]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_BISHOP) & SquareBits[61]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_KNIGHT) & SquareBits[57]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_KNIGHT) & SquareBits[62]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_ROOK) & SquareBits[56]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_ROOK) & SquareBits[63]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(WHITE_KING) & SquareBits[60]) != 0) {
//                    cnt++;
//                }
//                score -= (cnt << 3);
//            }
            // And finally, incite castling when the enemy has a queen on the board
            // This is a slightly simpler version of a factor used by Cray Blitz
//            if (GetBitBoard(BLACK_QUEEN) != 0) {
            if (isDAME(NOIR)) {
                // Being castled deserves a bonus
                if (gp.hasRoques(BLANC)) {
//                if (GetHasCastled(SIDE_WHITE)) {
                    score += 10;
                } /* 
                    @TODO VERIF small penalty if you can still castle on both sides
                 */ else if (gp.isGrandRoque(BLANC) && gp.isPetitRoque(BLANC)) {
                    score -= 24;
                } // bigger penalty if you can only castle kingside
                else if (gp.isPetitRoque(BLANC)) {
//                    if (getCastlingStatus(SIDE_WHITE + CASTLE_KINGSIDE)) {
                    score -= 40;
                } // bigger penalty if you can only castle queenside
                else if (gp.isGrandRoque(BLANC)) {
                    score -= 80;
                } // biggest penalty if you can't castle at all
                else {
                    score -= 120;
                }
            }
        } else // from black's perspective
        {
            // Has the machine advanced its center pawns?
            if (typeDePiece(e7) == PION && couleurPiece(e7) == NOIR) {
                score -= 15;
            }
            if (typeDePiece(d7) == PION && couleurPiece(d7) == NOIR) {
                score -= 15;
            }
//            if (FindBlackPiece(11) == BLACK_PAWN) {
//                score -= 15;
//            }
//            if (FindBlackPiece(12) == BLACK_PAWN) {
//                score -= 15;
//            }

            // Penalize bishops and knights on the back rank
            for (int square = a8; square <= h8; square++) {//verif
                if (couleurPiece(square) == NOIR
                        && (typeDePiece(square) == CAVALIER || typeDePiece(square) == FOU)) {
                    score -= 10;
                }
//            for (int square = 0; square < 8; square++) {
//                if ((FindBlackPiece(square) == BLACK_KNIGHT)
//                        || (FindBlackPiece(square) == BLACK_BISHOP)) {
//                    score -= 10;
//                }
//            }

                /*
            @TODO Penalize too-early queen movement (black)
                 */
//            long queenboard = GetBitBoard(BLACK_QUEEN);
//            if ((queenboard != 0) && ((queenboard & SquareBits[3]) == 0)) {
//                // First, count friendly pieces on their original squares
//                int cnt = 0;
//                if ((GetBitBoard(BLACK_BISHOP) & SquareBits[2]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_BISHOP) & SquareBits[5]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_KNIGHT) & SquareBits[1]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_KNIGHT) & SquareBits[6]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_ROOK) & SquareBits[0]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_ROOK) & SquareBits[7]) != 0) {
//                    cnt++;
//                }
//                if ((GetBitBoard(BLACK_KING) & SquareBits[4]) != 0) {
//                    cnt++;
//                }
//                score -= (cnt << 3);
//            }
                if (isDAME(BLANC)) {
                    // Being castled deserves a bonus
                    if (gp.hasRoques(NOIR)) {
//                if (GetHasCastled(SIDE_WHITE)) {
                        score += 10;
                    } /* 
                    @TODO VERIF small penalty if you can still castle on both sides
                     */ else if (gp.isGrandRoque(NOIR) && gp.isPetitRoque(NOIR)) {
                        score -= 24;
                    } // bigger penalty if you can only castle kingside
                    else if (gp.isPetitRoque(NOIR)) {
//                    if (getCastlingStatus(SIDE_WHITE + CASTLE_KINGSIDE)) {
                        score -= 40;
                    } // bigger penalty if you can only castle queenside
                    else if (gp.isGrandRoque(NOIR)) {
                        score -= 80;
                    } // biggest penalty if you can't castle at all
                    else {
                        score -= 120;
                    }
                }
//                if (GetBitBoard(WHITE_QUEEN) != 0) {
//                    // Being castled deserves a bonus
//                    if (GetHasCastled(SIDE_BLACK)) {
//                        score += 10;
//                    } // small penalty if you can still castle on both sides
//                    else if (getCastlingStatus(SIDE_BLACK + CASTLE_QUEENSIDE)
//                            && getCastlingStatus(SIDE_BLACK + CASTLE_QUEENSIDE)) {
//                        score -= 24;
//                    } // bigger penalty if you can only castle kingside
//                    else if (getCastlingStatus(SIDE_BLACK + CASTLE_KINGSIDE)) {
//                        score -= 40;
//                    } // bigger penalty if you can only castle queenside
//                    else if (getCastlingStatus(SIDE_BLACK + CASTLE_QUEENSIDE)) {
//                        score -= 80;
//                    } // biggest penalty if you can't castle at all
//                    else {
//                        score -= 120;
//                    }
//                }
            }

        }
        return score;
    }

    private int EvalBadBishops(int noirsOuBlancs) {

        if (!isFOU(noirsOuBlancs)) {
            return 0;
        }
//        long where = GetBitBoard(BISHOP + noirsOuBlancs);
//        if (where == 0) {
//            return 0;
//        }

        int score = 0;
        for (int caseO : CASES117) {
            int square = INDICECASES[caseO];//0 a 63
//        for (int square = 0; square < 64; square++) {
            // Find a bishop
            if (typeDePiece(caseO) == FOU) {
//            if ((where & SquareBits[square]) != 0) {
                // What is the bishop's square color?
                /*
                @TODO square color
                 */
                //SQUARE COLOR

                int rank = (square >> 3);
                int file = (square % 8);
                if ((rank % 2) == (file % 2)) {
                    score -= (MaxPawnColorBins[0] << 3);
                } else {
                    score -= (MaxPawnColorBins[1] << 3);
                }

                /*
                @TODO ?
                 */
                // Use the bitboard erasure trick to avoid looking for additional
                // bishops once they have all been seen
//                where ^= SquareBits[square];
//                if (where == 0) {
//                    break;
//                }
            }
        }
        return score;
    }
//
//    private int EvalPawnStructure(int noirsOuBlancs) {
//        int score = 0;
//
//        // First, look for doubled pawns
//        // In chess, two or more pawns on the same file usually hinder each other,
//        // so we assign a minor penalty
//        for (int bin = 0; bin < 8; bin++) {
//            if (MaxPawnFileBins[bin] > 1) {
//                score -= 8;
//            }
//        }
//
//        // Now, look for an isolated pawn, i.e., one which has no neighbor pawns
//        // capable of protecting it from attack at some point in the future
//        if ((MaxPawnFileBins[0] > 0) && (MaxPawnFileBins[1] == 0)) {
//            score -= 15;
//        }
//        if ((MaxPawnFileBins[7] > 0) && (MaxPawnFileBins[6] == 0)) {
//            score -= 15;
//        }
//        for (int bin = 1; bin < 7; bin++) {
//            if ((MaxPawnFileBins[bin] > 0) && (MaxPawnFileBins[bin - 1] == 0)
//                    && (MaxPawnFileBins[bin + 1] == 0)) {
//                score -= 15;
//            }
//        }
//
//        // Assign a small penalty to positions in which Max still has all of his
//        // pawns; this incites a single pawn trade (to open a file), but not by
//        // much
//        if (MaxTotalPawns == 8) {
//            score -= 10;
//        }
//
//        // Penalize pawn rams, because they restrict movement
//        score -= 8 * PawnRams;
//
//        // Finally, look for a passed pawn; i.e., a pawn which can no longer be
//        // blocked or attacked by a rival pawn
//        if (noirsOuBlancs == SIDE_WHITE) {
//            if (MaxMostAdvanced[0] < Math.min(MinMostBackward[0], MinMostBackward[1])) {
//                score += (8 - (MaxMostAdvanced[0] >> 3))
//                        * (8 - (MaxMostAdvanced[0] >> 3));
//            }
//            if (MaxMostAdvanced[7] < Math.min(MinMostBackward[7], MinMostBackward[6])) {
//                score += (8 - (MaxMostAdvanced[7] >> 3))
//                        * (8 - (MaxMostAdvanced[7] >> 3));
//            }
//            for (int i = 1; i < 7; i++) {
//                if ((MaxMostAdvanced[i] < MinMostBackward[i])
//                        && (MaxMostAdvanced[i] < MinMostBackward[i - 1])
//                        && (MaxMostAdvanced[i] < MinMostBackward[i + 1])) {
//                    score += (8 - (MaxMostAdvanced[i] >> 3))
//                            * (8 - (MaxMostAdvanced[i] >> 3));
//                }
//            }
//        } else // from Black's perspective
//        {
//            if (MaxMostAdvanced[0] > Math.max(MinMostBackward[0], MinMostBackward[1])) {
//                score += (MaxMostAdvanced[0] >> 3)
//                        * (MaxMostAdvanced[0] >> 3);
//            }
//            if (MaxMostAdvanced[7] > Math.max(MinMostBackward[7], MinMostBackward[6])) {
//                score += (MaxMostAdvanced[7] >> 3)
//                        * (MaxMostAdvanced[7] >> 3);
//            }
//            for (int i = 1; i < 7; i++) {
//                if ((MaxMostAdvanced[i] > MinMostBackward[i])
//                        && (MaxMostAdvanced[i] > MinMostBackward[i - 1])
//                        && (MaxMostAdvanced[i] > MinMostBackward[i + 1])) {
//                    score += (MaxMostAdvanced[i] >> 3)
//                            * (MaxMostAdvanced[i] >> 3);
//                }
//            }
//        }
//
//        return score;
//    }
//
//    private boolean AnalyzePawnStructure(int noirsOuBlancs) {
//        // Reset the counters
//        for (int i = 0; i < 8; i++) {
//            MaxPawnFileBins[i] = 0;
//            MinPawnFileBins[i] = 0;
//        }
//        MaxPawnColorBins[0] = 0;
//        MaxPawnColorBins[1] = 0;
//        PawnRams = 0;
//        MaxTotalPawns = 0;
//
//        // Now, perform the analysis
//        if (noirsOuBlancs == SIDE_WHITE) {
//            for (int i = 0; i < 8; i++) {
//                MaxMostAdvanced[i] = 63;
//                MinMostBackward[i] = 63;
//                MaxPassedPawns[i] = 63;
//            }
//
//            for (int square = 55; square >= 8; square--) {
//                int caseO;
//                // Look for a white pawn first, and count its properties
//                if (couleurPiece(caseO) == BLANC && typeDePiece(caseO) == PION) {
////                if (FindWhitePiece(square) == WHITE_PAWN) {
//                    // What is the pawn's position, in rank-file terms?
//                    int rank = square >> 3;
//                    int file = square % 8;
//
//                    // This pawn is now the most advanced of all white pawns on its file
//                    MaxPawnFileBins[file]++;
//                    MaxTotalPawns++;
//                    MaxMostAdvanced[file] = square;
//
//                    // Is this pawn on a white or a black square?
//                    if ((rank % 2) == (file % 2)) {
//                        MaxPawnColorBins[0]++;
//                    } else {
//                        MaxPawnColorBins[1]++;
//                    }
//
//                    // Look for a "pawn ram", i.e., a situation where a black pawn
//                    // is located in the square immediately ahead of this one.
//                    if (FindBlackPiece(square - 8) == BLACK_PAWN) {
//                        PawnRams++;
//                    }
//                } // Now, look for a BLACK pawn
//                else if (FindBlackPiece(square) == BLACK_PAWN) {
//                    // If the black pawn exists, it is the most backward found so far
//                    // on its file
//                    int file = square % 8;
//                    MinPawnFileBins[file]++;
//                    MinMostBackward[file] = square;
//                }
//            }
//        } else // Analyze from Black's perspective
//        {
//            for (int i = 0; i < 8; i++) {
//                MaxMostAdvanced[i] = 0;
//                MaxPassedPawns[i] = 0;
//                MinMostBackward[i] = 0;
//            }
//            for (int square = 8; square < 56; square++) {
//                if (FindBlackPiece(square) == BLACK_PAWN) {
//                    // What is the pawn's position, in rank-file terms?
//                    int rank = square >> 3;
//                    int file = square % 8;
//
//                    // This pawn is now the most advanced of all white pawns on its file
//                    MaxPawnFileBins[file]++;
//                    MaxTotalPawns++;
//                    MaxMostAdvanced[file] = square;
//
//                    if ((rank % 2) == (file % 2)) {
//                        MaxPawnColorBins[0]++;
//                    } else {
//                        MaxPawnColorBins[1]++;
//                    }
//
//                    if (FindWhitePiece(square + 8) == WHITE_PAWN) {
//                        PawnRams++;
//                    }
//                } else if (FindWhitePiece(square) == WHITE_PAWN) {
//                    int file = square % 8;
//                    MinPawnFileBins[file]++;
//                    MinMostBackward[file] = square;
//                }
//            }
//        }
//        return true;
//    }

    private int EvalMaterial(int side) {
        // If both sides are equal, no need to compute anything!

        if (MaterialValue[SIDE_BLACK] == MaterialValue[SIDE_WHITE]) {
            return 0;
        }

        int otherSide = (side + 1) % 2;
        // 0+1 % 2 = 1
        //1+1  %2  = 0
        int matTotal = MaterialValue[side] + MaterialValue[otherSide];

        // Who is leading the game, material-wise?
        if (MaterialValue[SIDE_BLACK] > MaterialValue[SIDE_WHITE]) {
            // Black leading/ mène
            int matDiff = MaterialValue[SIDE_BLACK] - MaterialValue[SIDE_WHITE];
            //equation ?
            int val = Math.min(2400, matDiff)
                    + (matDiff * (12000 - matTotal) * NumPawns[SIDE_BLACK])
                    / (6400 * (NumPawns[SIDE_BLACK] + 1));

            if (side == SIDE_BLACK) {
                return val;
            } else {
                return -val;
            }
        } else {
            // White leading / mène
            int matDiff = MaterialValue[SIDE_WHITE] - MaterialValue[SIDE_BLACK];
            // eq ?
            int val = Math.min(2400, matDiff)
                    + (matDiff * (12000 - matTotal) * NumPawns[SIDE_WHITE])
                    / (6400 * (NumPawns[SIDE_WHITE] + 1));

            if (side == SIDE_WHITE) {
                return val;
            } else {
                return -val;
            }
        }
    }

    // Look for the piece located on a specific square
    private int FindWhitePiece(int square) {
        return 0;
    }

    private int FindBlackPiece(int square) {
        return 0;
    }

    private long GetBitBoard(int which) {
        return BitBoards[which];
    }

    private boolean GetHasCastled(int which) {
        return HasCastled[which];
    }

    private boolean getCastlingStatus(int which) {
        return CastlingStatus[which];
    }

    private void getMaterielValue() {
//        int[] MaterialValue = new int[2];
//        int[] NumPawns = new int[2];
        for (int caseO : CASES117) {
            int typeDePiece = typeDePiece(caseO);
            MaterialValue[Math.abs(couleurPiece(caseO))] += PIECE_VALUES[typeDePiece];
            // 0 = NOIRS
            // -1 -> 1 = BLANCS
            if (typeDePiece == PION) {
                NumPawns[Math.abs(couleurPiece(caseO))]++;
            }
        }

    }

    private int[] getMaxPawnFileBins() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private int[] getMinPawnFileBins() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private boolean isDAME(int BLANC) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private boolean isTour(int noirsOuBlancs) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private boolean isFOU(int noirsOuBlancs) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}

