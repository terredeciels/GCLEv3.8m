int alphabeta(int profondeur, int alpha, int beta)
	{
		if (game_over or profondeur <= 0)
			return eval();
		move meilleur_coup;
			for (chaque coup possible m) {
				jouer le coup m;
				int score = -alphabeta(profondeur - 1, -beta, -alpha)
				annuler le coup m;
				if (score >= alpha){
					alpha = score ;
					meilleur_coup = m ;
				if (alpha >= beta)
					break;
				}
			}
		return alpha;
	}

**********************************************************
fonction ALPHABETA(P, A, B) /* A < B */
   si P est une feuille alors
       retourner la valeur de P
   sinon
       Meilleur = –INFINI
       pour tout enfant Pi de P faire
           Val = -ALPHABETA(Pi,-B,-A)
           si Val > Meilleur alors
               Meilleur = Val
               si Meilleur > A alors
                   A = Meilleur
                   si A = B alors
                       retourner Meilleur
                   finsi
               finsi
           finsi 
       finpour 
       retourner Meilleur
   finsi
fin
*************************************************************
int AlphaBeta(int depth, int alpha, int beta)
{
    if (depth == 0)
        return Evaluate();
    GenerateLegalMoves();
    while (MovesLeft()) {
        MakeNextMove();
        val = -AlphaBeta(depth - 1, -beta, -alpha);
        UnmakeMove();
        if (val >= beta)
            return beta;
        if (val > alpha)
            alpha = val;
    }
    return alpha;
}
**************************************************************
 1 private int alphaBeta(int ply, int alpha, int beta)
 2 {
 3    if(ply == 0)
 4       return positionEvaluation;
 5
 6    Vector legalMoves = generateMoves();
 7    for(int i = 0; i < legalMoves.size(); i++)
 8    {
 9       makeMove(legalMoves.get(i));
10       eval = -alphaBeta(ply-1, -beta, -alpha);
11       unmakeMove(legalMoves.get(i));
12
13       if(eval >= beta)
14          return beta;
15
16       if(eval > alpha)
17          alpha = eval;
18    }
19    return alpha;
20 }
**************************************************************
#define PROFMAX 4 // Ne marche que pour les niveaux pairs
#define INFINI MAXINT
#define odd(a) ((a)&1)
int AlphaBeta(char *Position,int profondeur,int alpha,int beta) {
 int valeur,Best,i,N;
 char *PositionSuivante[100];
 
	if (profondeur==PROFMAX) return Evaluation(Position);
	
	N=TrouveCoupsPossibles(Position,PositionSuivante);
	
	if (odd(profondeur)) Best=INFINI else Best=-INFINI;
	for (i=0; i<N; i++) {
		valeur=AlphaBeta(PositionSuivante[i],profondeur+1,alpha,beta);
		if (odd(profondeur)) { // on minimise
	if (valeur<Best) {
				Best=valeur;
				if (Best<beta) {
					beta=Best;
					if (alpha>beta) return Best; // coupure alpha
				}
			}
		else if (valeur>Best) { // on maximise
				Best=valeur;
				if (Best>alpha) {
					alpha=Best;
				if (alpha>beta) return Best; // coupure beta
				}
			}
		}
	return Best;
	}
